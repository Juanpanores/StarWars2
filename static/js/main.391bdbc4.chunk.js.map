{"version":3,"sources":["Components/Deck.js","Components/Card.js","Components/CardList.js","Components/Encounter.js","Components/Graveyard.js","Components/Music.mp3","Containers/App.js","reportWebVitals.js","index.js"],"names":["Deck","pickUpCards","className","options","max","style","height","width","alt","src","onClick","Card","user","name","pickCard","attack","defense","onboard","grave","length","CardList","handCards","map","i","skin_color","eye_color","Encounter","fighter","Graveyard","App","useState","deck","setDeck","newCardsInHand","setNewCardsInHand","setFight","match","setMatch","graveyard","setGraveyard","useEffect","fetch","then","response","json","people","results","sort","Math","random","Howl","Music","autoplay","loop","volume","console","log","filter","el","includes","setTimeout","health1","health2","deaths","survivors","push","concat","event","pickup","slice","splice","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.391bdbc4.chunk.js","sourcesContent":["import React from 'react'\r\nimport Tilt from 'react-tilt'\r\n\r\nconst Deck = ({pickUpCards}) => {\r\n    return(\r\n        <div className='deck tc'>\r\n                <h1>DECK</h1>\r\n                    <Tilt className=\"Tilt dcenter\" options={{ max : 25 }} style={{ height: '250px', width: '200px',}} >\r\n                        <div className=\"Tilt-inner\">\r\n                            <img\r\n                            alt='' \r\n                            src=\"https://i.pinimg.com/originals/78/81/c4/7881c41a769f124d061ad659b8545164.jpg\" \r\n                            className='br2 br bb bw3 b--dark-pink deckgrow'\r\n                            onClick={pickUpCards}\r\n                            >\r\n                            </img>\r\n                        </div>\r\n                    </Tilt>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Deck;","import React from 'react'\r\n\r\nconst Card = ({user,name,pickCard,attack,defense,onboard,grave}) => {\r\n    return(\r\n        <div className='card dib ma2 br2 tl' onClick={() => pickCard(user)} >\r\n\r\n            <h2 className='cardname'>{name}</h2>\r\n            <p className='cardtext '>   \r\n                Lorem ipsum dolor sit amet, consectetur adipisicing elit.\r\n            </p>\r\n            <h2 className='attack'>{attack.length}</h2>\r\n            <h2 className='defense'>{defense.length}</h2>\r\n            <img alt='' className='charphoto' src={`https://robohash.org/${name}?200x200`}/>\r\n        </div>        \r\n    )\r\n}\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\nconst CardList = ({handCards,pickCard}) => {\r\n    return(\r\n        <div className='hand'>\r\n            {\r\n            handCards.map((user,i) =>{\r\n                return ( \r\n                    <Card \r\n                        key={i}\r\n                        user={user}\r\n                        name={user.name}\r\n                        attack={user.skin_color}\r\n                        defense={user.eye_color}\r\n                        pickCard={pickCard}\r\n                        /> \r\n                    )\r\n                })\r\n            };\r\n        </div>  \r\n    );\r\n}   \r\n\r\nexport default CardList;","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\nconst Encounter = ({fighter}) => {\r\n    return(\r\n        <div className='encounter'>\r\n            {\r\n            fighter.map((user,i) =>{\r\n                return ( \r\n                    <Card\r\n                        key={i}\r\n                        user={user}\r\n                        name={user.name}\r\n                        attack={user.skin_color}\r\n                        defense={user.eye_color}\r\n                        onboard={true}\r\n                        /> \r\n                    )\r\n                })\r\n            };\r\n        </div>  \r\n    );\r\n}   \r\n\r\nexport default Encounter;","import React from 'react'\r\nimport Card from './Card.js';\r\n\r\nconst Graveyard = ({grave}) => {\r\n    return(\r\n        <div className=' graveyard tc'>\r\n            <div>\r\n            <h1 >GRAVEYARD</h1>\r\n            </div>\r\n                \r\n                <div className= 'gravepile'>\r\n                    <div className='gravecards'>\r\n                        {\r\n                        grave.map((user,i) =>{\r\n                            return ( \r\n                                <Card \r\n                                    key={i}\r\n                                    user={user}\r\n                                    name={user.name}\r\n                                    attack={user.skin_color}\r\n                                    defense={user.eye_color}\r\n                                    /> \r\n                                )\r\n                            })\r\n                        };\r\n                    </div>\r\n                    <div className='grave br3 ba bw1 b--dark-pink bg-dark-pink o-60 '>\r\n                    </div>\r\n                </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Graveyard;","export default __webpack_public_path__ + \"static/media/Music.4210094a.mp3\";","import React, { useState, useEffect} from 'react';\r\nimport Deck from '../Components/Deck.js';\r\nimport CardList from '../Components/CardList.js';\r\nimport Encounter from '../Components/Encounter.js';\r\nimport Graveyard from '../Components/Graveyard.js';\r\nimport './App.css';\r\nimport Particles from 'react-particles-js';\r\nimport Music from '../Components/Music.mp3';\r\nimport {Howl} from 'howler';\r\n\r\n\r\nfunction App() {\r\n  const [deck, setDeck] = useState ([]);\r\n  const [newCardsInHand, setNewCardsInHand] = useState ([]);\r\n  const [fighter, setFight] = useState ([]);\r\n  const [match, setMatch] = useState (false);\r\n  const [graveyard, setGraveyard] = useState ([]);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    fetch('https://swapi.py4e.com/api/people/')\r\n    .then(response => response.json())\r\n    .then(people=> {setDeck(people.results.sort(() => 0.5 - Math.random()))}); // brings the SWAPI structure and shuffles the deck\r\n    let sound = new Howl({                                                     //music player\r\n      src: [Music],\r\n      autoplay: true,\r\n      loop: true,\r\n      volume: 0.2,\r\n    });\r\n  },[])\r\n\r\n  \r\n  const onPickUpCard = (event) => {\r\n    if (deck.length>0)  {                   \r\n      let pickup=5-newCardsInHand.length;     //calculets how many cards to pick up\r\n      if (pickup> deck.length){               //avoids the situation to pick up more cards than there is in the deck\r\n        pickup= deck.length\r\n      }\r\n      console.log(\"Cards to pick: \",pickup)\r\n          setNewCardsInHand(newCardsInHand.concat(deck.slice(0,pickup)));  //set the cards in the hand\r\n          deck.splice(0,pickup)                                            //Removes picked up cards from the deck\r\n          setDeck(deck);\r\n    }\r\n  }\r\n  console.log(deck)\r\n  const onPickFighter = (event) => { \r\n    if (fighter.length<2 ) {                        //to prevent selecting more than 2 fighters\r\n    setFight(fighter.concat(event));\r\n    }\r\n  }\r\n  \r\n  useEffect(() => {\r\n    setNewCardsInHand(newCardsInHand.filter((el) => !fighter.includes(el)));  //removes fighters from hand\r\n    if (fighter.length===2) {\r\n      setTimeout(() => {\r\n        setMatch(true)                                                        //starts the match fase\r\n      }, 1000); \r\n    }\r\n  },[fighter])\r\n\r\n  useEffect(() => {\r\n    if (fighter.length===2) {\r\n    const health1= fighter[0].eye_color.length- fighter[1].skin_color.length;  //attack is the number of letes of skin color and deffense the eye color\r\n    const health2= fighter[1].eye_color.length - fighter[0].skin_color.length;\r\n    const deaths=[];\r\n    const survivors=[];\r\n      if(health1 <=0 ) {\r\n        console.log(health1)\r\n        deaths.push(fighter[0]);\r\n        console.log(\"winner \" ,fighter[1].name)\r\n      }else{\r\n        survivors.push(fighter[0])\r\n        console.log(\"1 lives\")\r\n      }\r\n\r\n      if(health2 <=0 ) {  \r\n        console.log(health1)\r\n        deaths.push(fighter[1]);\r\n        console.log(\"winner \" ,fighter[0].name)\r\n      }else{\r\n        survivors.push(fighter[1])\r\n        console.log(\"2 lives\")\r\n      }\r\n      console.log(\"end fight\")\r\n      setNewCardsInHand(newCardsInHand.concat(survivors))  //sets the surviving cards back in the hand\r\n      if (deaths.length != 0){\r\n      setGraveyard(deaths)}                                //put dead cards in the graveyard\r\n      console.log(\"set fighters to cero\")\r\n      setFight([]);                                        //clear fighters from the encounter\r\n      setMatch(false)\r\n    }\r\n  },[match])\r\n\r\n\r\n \r\n\r\n\r\n  console.log(\"Cards in deck \",deck.length)\r\n  console.log(\"Cards in hand \",newCardsInHand.length)\r\n  console.log(fighter)\r\n  console.log(match)\r\n\r\n  return (deck.length===0 && newCardsInHand.length===1 && fighter.length===0) ?   //sets the winning status\r\n  <h3 className='tc win'>YOU WIN!</h3>:   \r\n  (deck.length===0 && newCardsInHand===0)?                                        //sets the loading status\r\n  <h1 className='tc loading'>LOADING</h1>:\r\n  (\r\n      <div className=\"wrapper\">\r\n        <Particles className='particles' /> \r\n          <div className='title'><h1 className='f-headline mt4 mb0 tc'>STAR WARS</h1>\r\n          <h2 className='f-4  tc'>by Juanpa Nores</h2>\r\n          </div>\r\n            <Deck pickUpCards={onPickUpCard}/>\r\n            <CardList handCards={newCardsInHand} pickCard={onPickFighter}/>   \r\n            <Encounter fighter={fighter}/>\r\n            <Graveyard grave={graveyard}/>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Containers/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'tachyons';\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <App />\r\n    ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}